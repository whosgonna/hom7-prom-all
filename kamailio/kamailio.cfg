#!KAMAILIO
#
#  Copyright C 2021 BCMOne, Inc. (https://www.bcmone.com)
#
#  295 Madison Avenue
#  5th Floor
#  New York, NY 10017
#  USA
#
#  All rights reserved.
#
# Warning: This script is protected by copyright law and international treaties.
# Unauthorized reproduction or distribution of this script in its entirety, or
# any portion of it, may result in severe civil and criminal penalties, and will
# be prosecuted to the maximum extent possible under the law.
#
#
# CNAM Relay Proxy
#
#
##############################################################################
##############################################################################
#################                                     ########################
#################         KSIP Server v5.6.x -        ########################
#################   Default Configuration Parameter   ########################
#################        All Rights Reserved          ########################
#################                                     ########################
##############################################################################
##############################################################################
#
#

import_file  "config_site_local.k"

children    = 8
force_rport = yes


!!ifndef CNAM_URL
    !!defenv CNAM_URL
!!endif

!!ifndef CNAM_API_KEY
    !!trydefenv CNAM_API_KEY
!!endif



# ------------------ module loading ----------------------------------

loadmodule "corex"
loadmodule "tm"
loadmodule "sl"
loadmodule "xlog"
loadmodule "pv"
loadmodule "ctl"
loadmodule "textops"
loadmodule "tmx"
loadmodule "siputils"
loadmodule "http_async_client"
loadmodule "jansson"
loadmodule "uuid"
loadmodule "cfgutils"
loadmodule "kex"
loadmodule "counters"
loadmodule "htable"
#loadmodule "evrexec"
loadmodule "ipops"
loadmodule "siptrace"

!!ifdef WITH_XHTTP
  loadmodule "xhttp"
!!endif
loadmodule "jsonrpcs"


#!trydef STATS_SAMPLE_SIZE 100


!!ifdef HTTP_ASYNC_CLIENT_WORKERS
    modparam("http_async_client", "workers", HTTP_ASYNC_CLIENT_WORKERS)
!!else
    modparam("http_async_client", "workers", 2)
!!endif


modparam("tm", "fr_timer", 3000)
modparam("tm", "failure_reply_mode", 0)


!!ifdef ADDRESS_LIST
  loadmodule "permissions"
  modparam("permissions", "address_file", ADDRESS_LIST)
!!endif


modparam("counters", "script_counter", "http_req")
modparam("counters", "script_counter", "http_err")
modparam("counters", "script_counter", "http_non_200")
modparam("counters", "script_counter", "cnam_unavailable")
modparam("counters", "script_counter", "cnam_found")


modparam("htable", "htable", "http_timer=>size=4;")


!!ifdef CNAM_API_KEY
    modparamx("pv", "shvset", "cnam_url=s:$def(CNAM_URL)?api_key=$def(CNAM_API_KEY)")
!!else
    modparamx("pv", "shvset", "cnam_url=s:$def(CNAM_URL)")
!!endif

modparam("xlog", "prefix", "[$cfg(route) $ci $rm-$cs] ")
modparam("xlog", "prefix_mode", 1)


modparam("siptrace", "trace_on", 1 );
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "hep_capture_id", 234)
modparam("siptrace", "trace_mode", 1)
modparam("siptrace", "duplicate_uri", "sip:heplify-server:9060")


# -------------------------  request routing logic -------------------
route {
    route(IP_AUTH);

    ## reply to OPTIONS with OK.  Source IP should have already been 
    ## authenticated, either by firewall, or permissions module if IP_AUTH set.
    if ( is_method("OPTIONS") ) {
        xdbg("Reploy to OPTIONS with 200 OK and exit\n");
        sl_reply( 200, "OK" );
        exit;
    }

    xinfo("Initial request received from [$si:$sp] RURI: [$ru], To: [$tu], "
          "From: [$fu]\n");
    

    # CANCEL processing
    if ( is_method("CANCEL") ) {
    	if ( t_check_trans() ) {
            xcrit("Transaction for CANCEL found with t_check_trans();\n");
            if ( !t_relay_cancel() ) { 
                xcrit("t_relay_cancel() failed [$rc]\n");
                send_reply( "500", "Internal Server Error" );
                drop;
            }
            xinfo("Call Cancelled\n");
    	}
        xinfo("No call found for CANCEL request.  Exiting\n");
    	exit;
    }

    # handle retransmissions
    if ( !is_method("ACK") ) {
        if ( t_precheck_trans() ) {
        	t_check_trans();
        	exit;
        }

        t_check_trans();
    }

    ## We really shouldn't have any INVITES that are within a dialog, but just
    ## in case:
    if ( has_totag() ) {
        route(WITHINDLG);
    }

    route(CNAM_REST_QUERY);

}

route[CNAM_REST_QUERY] {
    ## Create JSON body for POST message:
    $avp(txn_id) = $uuid(g);
    jansson_set("string", "called_party",  $tU, "$avp(cnam_q)");
    jansson_set("string", "calling_party", $fU, "$avp(cnam_q)");
    jansson_set("string", "txn_id", "$avp(txn_id)", "$avp(cnam_q)");

    xinfo("CNAM Query Data: [$avp(cnam_q)]\n");

    ## Set the URL for the message
    #route(SET_CNAM_URL);
    xinfo("CNAM URL [$shv(cnam_url)]\n");
    
    
    $http_req(body) = $avp(cnam_q);
    $http_req(hdr)  = "Content-Type: application/json";

    ## Create a transaction so we can resume after the http query.
    t_newtran();

    cnt_inc("http_req");
    http_async_query( $shv(cnam_url), "CNAM_REPLY" );
}


route[SET_CNAM_URL] {

    if( defined $def(CNAM_API_KEY) ) {
        $avp(CNAM_URL) = $def(CNAM_URL) + "?api_key=" + $def(CNAM_API_KEY);
    }

    xinfo("CNAM URL [$avp(CNAM_URL)]\n");
}


route[CNAM_REPLY] {
    xinfo("Total http request time: [$http_time(total)]\n");

    ## Add the transaction ID to all replies:
    append_to_reply("X-CNAM-Txn-Id: $avp(txn_id)\r\n");

    if ( !$http_ok ) {
        xerr("HTTP Error [$http_err]. Send 500 $http_err and exit\n");
        cnt_inc("http_err");
        send_reply( "500", "$http_err" );
        exit;
    }

    ## Sample and record response time  We're doing this after the generic
    ## http_ok check, because that could include timeouts, which would greatly
    ## skew this metric.
    if ( !defined $sht(http_timer=>sample) ) {
        xinfo("Setting $$sht(http_timer=>sample) to 0\n");
        $sht(http_timer=>sample) = 0;
    }

    $vz(sample) = $sht(http_timer=>sample);
    sht_lock("http_timer=>sample");
    $sht(http_timer=>sample) = $sht(http_timer=>sample) + 1;
    sht_unlock("http_timer=>sample");
    

    if ( $vz(sample) mod STATS_SAMPLE_SIZE == 0 ) {
        xdbg("Updating http_timer hashtable on sample $vz(sample)\n");
        $sht(http_timer=>total)         = $http_time(total);
        $sht(http_timer=>lookup)        = $http_time(lookup);
        $sht(http_timer=>connect)       = $http_time(connect);
        $sht(http_timer=>appconnect)    = $http_time(appconnect);
        $sht(http_timer=>pretransfer)   = $http_time(pretransfer);
        $sht(http_timer=>starttransfer) = $http_time(starttransfer);
        $sht(http_timer=>redirect)      = $http_time(redirect);
    }

    if ( $http_rs != 200 ) {
        xerr("HTTP non-200 reply [$http_rs - $http_rr]. Reply $http_rs "
             "$http_rr and exit\n");
        cnt_inc("http_non_200");
        send_reply( "$http_rs", "$http_rr" );
        exit;
    }
    
    xdbg("HTTP status: '$http_rs'\n");
    xinfo("HTTP response body: [$http_rb]\n");

    jansson_xdecode($http_rb, "cnam_reply");
    
    ## Make sure to clear the variable first - it persists in the worker
    $vn(cnam_name) = $null;
    if ( !jansson_get("cnam.calling_name", $http_rb, "$vn(cnam_name)") ) {
        cnt_inc("cnam_unavailable");
        $vn(cnam_name) = "Unavailable";
    }
    else {
        cnt_inc("cnam_found");
    }

    $var(pai) = "P-Asserted-Identity: \"" 
              + $vn(cnam_name) + "\" <" + $fu + ">";

    xnotice("Add PAI header to reply: [$var(pai)]\n" );

    append_to_reply("$var(pai)\r\n");

    ## "touch" $ru to make sure there's a contact header.  Kamailio 
    ## logs a warning otherwise.
    $ru = $ru;
    
    xinfo("CNAM lookup success. Send 380 Forwarding reply and exit.\n");
    send_reply( "380", "Forwarding" );
    exit;
}


route[IP_AUTH] {
    !!ifdef ADDRESS_LIST

        ## Assume private IP addresses are trusted.
        if( is_ip_rfc1918( $si ) ) {
            xinfo("$si is a private IP address. Allow connection\n");
        }
        else {
            xdbg("Checking the address list for [$si:$sp]\n");

            if ( !allow_source_address("1") ) {
                xerr("[$si:$sp] is not an allowed source address. Send 403 "
                     "Forbidden and exit.\n");

                sl_send_reply("403", "Forbidden");
                exit;
            };
        }

        xdbg"[$si:$sp] is an allowed address\n");

    !!endif
    return;
}


route[WITHINDLG] {
    if ( is_method("ACK") ) {
        ## This server relays nothing, so we only expect ACKs to local replies
        if ( !t_check_trans() ) {
            xinfo("ACK that FAILS t_check_trans(). Exit\n");
        	# ACK without matching transaction ... ignore and discard
            #send_reply( "481", "Call/Transaction Does Not Exist" );
        	exit;
        }
    }

    exit;
}

#event_route[evrexec:start] {
#    !!ifdef ADDRESS_LIST
#        xlogl("L_N", "Loading address list file '" +  ADDRESS_LIST + "'\n");
#    !!endif
#    return;
#}


!!ifdef WITH_XHTTP
    ## The example from the xhttp module documentation
    event_route[xhttp:request] {
        xhttp_reply("200", "OK", "text/html",
            "<html><body>OK - [$si:$sp]</body></html>");
    }  
!!endif

